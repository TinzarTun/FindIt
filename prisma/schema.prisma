generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  phone     String?
  avatar    String?
  verified  Boolean  @default(false)
  address   String?
  city      String?
  region    String?
  country   String?  @default("Myanmar")
  roleId    String   @db.ObjectId
  role      Role     @relation(fields: [roleId], references: [id])
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lostItems LostItem[]
  foundItems FoundItem[]
  claims    Claim[]
  messages  Message[]
  notifications Notification[]
}

model LostItem {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  categoryId   String     @db.ObjectId
  category     CategoryType @relation(fields: [categoryId], references: [id])
  featured     Boolean    @default(false)
  lostDate     DateTime
  lostLocation String
  locationDetails String?
  reward       Float?
  status       ItemStatus @default(LOST)
  images       String[]
  userId       String     @db.ObjectId
  foundItemId  String?    @db.ObjectId @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user         User       @relation(fields: [userId], references: [id])
  foundItem    FoundItem? @relation("LostFound", fields: [foundItemId], references: [id])
  claims       Claim[]    @relation("LostItemClaims")
}

model FoundItem {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  categoryId   String     @db.ObjectId
  category     CategoryType @relation(fields: [categoryId], references: [id])
  foundDate     DateTime
  foundLocation String
  images        String[]
  status        ItemStatus @default(FOUND)
  userId        String     @db.ObjectId
  lostItemId    String?    @db.ObjectId @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  user          User       @relation(fields: [userId], references: [id])
  lostItem      LostItem?  @relation("LostFound")
  claims        Claim[]    @relation("FoundItemClaims")
}

model Claim {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  description String
  status      ClaimStatus  @default(PENDING)
  userId      String       @db.ObjectId
  lostItemId  String?      @db.ObjectId
  foundItemId String?      @db.ObjectId
  evidence    String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  resolvedAt  DateTime?

  user        User         @relation(fields: [userId], references: [id])
  lostItem    LostItem?    @relation("LostItemClaims", fields: [lostItemId], references: [id])
  foundItem   FoundItem?   @relation("FoundItemClaims", fields: [foundItemId], references: [id])
  messages    Message[]
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  claimId   String @db.ObjectId
  userId    String @db.ObjectId
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)

  claim     Claim    @relation(fields: [claimId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  type      NotificationType
  userId    String @db.ObjectId
  read      Boolean          @default(false)
  data      Json
  createdAt DateTime         @default(now())

  user      User             @relation(fields: [userId], references: [id])
}

model Role {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  description String?
  permissions RolePermission[]
  users       User[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Permission {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  roles       RolePermission[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RolePermission {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  roleId       String      @db.ObjectId
  permissionId String      @db.ObjectId

  role         Role        @relation(fields: [roleId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])

  createdAt    DateTime    @default(now())
}

model CategoryType {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  isAlive     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lostItems   LostItem[]
  foundItems  FoundItem[]
}

enum ItemStatus {
  LOST
  FOUND
  RETURNED
  DONATED
  DISCARDED
}

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
  IN_REVIEW
  RESOLVED
}

enum NotificationType {
  CLAIM_RECEIVED
  CLAIM_UPDATED
  MESSAGE_RECEIVED
  ITEM_MATCHED
  PASSWORD_CHANGED
  ACCOUNT_VERIFIED
}

// npx prisma init
// npx prisma generate
// npx prisma db push
// npx prisma studio